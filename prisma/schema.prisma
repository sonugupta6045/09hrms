generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  title         String?
  department    String?
  bio           String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  clerkId       String    @unique
  positions     Position[]
  interviews    Interview[]
}

model Candidate {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  phone         String?
  resumeUrl     String?
  resumeKey     String?   // Store the Cloudinary object key
  skills        String[]
  experience    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  applications  Application[]
  interviews    Interview[]
}

model TemporaryCandidate {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  tempId        String    @unique
  name          String
  email         String
  phone         String?
  resumeUrl     String?
  skills        String[]
  experience    String?
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
}

model Position {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  department    String
  location      String
  type          String
  description   String
  requirements  String
  status        String    @default("Open")
  postedDate    DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
  applications  Application[]
}

model Application {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  status        String    @default("New")
  matchScore    Int?
  appliedDate   DateTime  @default(now())
  notes         String?   // Added for cover letter
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  candidate     Candidate @relation(fields: [candidateId], references: [id])
  candidateId   String    @db.ObjectId
  position      Position  @relation(fields: [positionId], references: [id])
  positionId    String    @db.ObjectId
  interviews    Interview[]
}

model Interview {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  scheduledFor  DateTime
  duration      Int       @default(60) // in minutes
  meetingUrl    String?
  notes         String?
  status        String    @default("Scheduled")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String    @db.ObjectId
  candidate     Candidate @relation(fields: [candidateId], references: [id])
  candidateId   String    @db.ObjectId
  scheduler     User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
}

